Git 建立 repository
    $ git init          # local intial
    $ git init --bare   # server initial (can't see source)

檢查目前 Git 的狀態
    $ git status

    ps. Untracked files 表示過去在這個 Git Repository 中從未有這支檔案 (unstage)
        使用 git add 這個指令來把它加入追蹤 (change to stage)

Git 新增檔案
    $ git add .             # 將資料先暫存到 staging area, add 之後再新增的資料, 於此次 commit 不會含在裡面.
    $ git add filename
    $ git add modify-file   # 修改過的檔案, 也要 add. (不然 commit 要加上 -a 的參數)
    $ git add -u            # 只加修改過的檔案, 新增的檔案不加入.
    $ git add -i            # 進入互動模式

Git 刪除檔案
    $ git rm filename

Git Commit
    $ git commit
    $ git commit --amend                    # 修改上次的commit, 如果已經 push出去就無法修改
    $ git commit -m 'commit message'
    $ git commit -a -m 'commit -message'    # 將所有修改過得檔案都 commit, 但是 新增的檔案 還是得要先 add.
    $ git commit -a -v                      # -v 可以看到檔案哪些內容有被更改, -a 把所有修改的檔案都 commit

Git Tag
    $ git tag v1 ebff       # log 是 commit ebff810c461ad1924fc422fd1d01db23d858773b 的內容, 設定簡短好記得 Tag: v1
    $ git tag 中文 ebff     # tag 也可以下中文, 任何文字都可以
    $ git tag -d 中文       # 把 tag=中文 刪掉

Git merge 合併
    $ git merge
    $ git merge master
    $ git merge new-branch
    $ git merge <branch_name>           # 合併另一個 branch，若沒有 conflict 衝突會直接 commit。若需要解決衝突則會再多一個 commit。
    $ git merge --squash <branch_name>  # 將另一個 branch 的 commit 合併為一筆，最後只留結果。合併完不會幫你先 commit。
    $ git cherry-pick SHA1_id -n        # "-n" 表示要自行 commit, 否則直接 commit不做確認
    $ git cherry-pick SHA1_id           # 只合併特定其中一個 commit。如果要合併多個，可以加上 -n 指令就不會先幫你 commit，這樣可以多 pick幾個要合併的 commit，最後再 git commit 即可。

Git diff
    $ git diff master                   # 與 Master 有哪些資料不同
    $ git diff --cached                 # 比較 staging area 跟本來的 Repository
    $ git diff tag1 tag2                # tag1, 與 tag2 的 diff
    $ git diff tag1:file1 tag2:file2    # tag1, 與 tag2 的 file1, file2 的 diff
    $ git diff                          # 比較 目前位置 與 staging area
    $ git diff --cached                 # 比較 staging area 與 Repository 差異
    $ git diff HEAD                     # 比較目前位置 與 Repository 差別
    $ git diff new-branch               # 比較目前位置 與 branch(new-branch) 的差別
    $ git diff --stat
    $ git diff --name-only --cached     # get the staged files list

Git blame
    $ git blame filename        # 關於此檔案的所有 commit 紀錄

Git reset 還原
    $ git reset HEAD filename       # 從 staging area 狀態回到 unstaging 或 untracked (檔案內容並不會改變)
    $ git reset --hard HEAD         # 還原到最前面
    $ git reset --hard HEAD~3
    $ git reset --soft HEAD~3

Git remote 維護遠端檔案
    $ git remote
    $ git remote add new-branch http://git.example.com.tw/project.git       # 增加遠端 Repository 的 branch(origin -> project)
    $ git remote show                                                       # 秀出現在有多少 Repository
    $ git remote rm new-branch                                              # 刪掉
    $ git remote update                                                     # 更新所有 Repository branch
    $ git branch -r                                                         # 列出所有 Repository branch

Git 產生新的 branch
    git branch                              # 列出目前有多少 branch
    git branch new-branch                   # 產生新的 branch (名稱: new-branch), 若沒有特別指定, 會由目前所在的 branch / master 直接複製一份.
    git branch new-branch master            # 由 master 產生新的 branch(new-branch)
    git branch new-branch v1                # 由 tag(v1) 產生新的 branch(new-branch)
    git branch -d new-branch                # 刪除 new-branch
    git branch -D new-branch                # 強制刪除 new-branch
    git checkout -b new-branch test         # 產生新的 branch, 並同時切換過去 new-branch
    git branch -r                           # 列出所有 Repository branch
    git branch -a                           # 列出所有 branch
    git branch -m old-branch new-branch     # old-branch 的名字改成 new-branch
    git branch -m new-branch                # 已經在 old-branch, 想要直接把名字改成 new-branch

Git checkout 切換 branch
    $ git checkout branch-name                # 切換到 branch-name
    $ git checkout master                     # 切換到 master
    $ git checkout -b new-branch master       # 從 master 建立新的 new-branch, 並同時切換過去 new-branch
    $ git checkout -b newbranch               # 由現在的環境為基礎, 建立新的 branch
    $ git checkout -b newbranch origin        # 於 origin 的基礎, 建立新的 branch
    $ git checkout -b newBranch <baseBranch>  # 於 baseBranch 的基礎, 建立新的 branch
    $ git checkout filename                   # 還原檔案到 Repository 狀態
    $ git checkout HEAD .                     # 將所有檔案都 checkout 出來(最後一次 commit 的版本), 注意, 若有修改的檔案都會被還原到上一版. (git checkout -f 亦可)
    $ git checkout xxxx .                     # 將所有檔案都 checkout 出來(xxxx commit 的版本, xxxx 是 commit 的編號前四碼), 注意, 若有修改的檔案都會被還原到上一版.
    $ git checkout -- *                       # 恢復到上一次 Commit 的狀態(* 改成檔名, 就可以只恢復那個檔案)
    $ git checkout <branch_name> -- <filename>  # 只切換某檔案(直接取代)

Git log
    $ git log                                                   # 將所有 log 秀出
    $ git log --graph                                           # 將所有 log 秀出
    $ git log --all                                             # 秀出所有的 log (含 branch)
    $ git log -p                                                # 將所有 log 和修改過得檔案內容列出
    $ git log -p filename                                       # 將此檔案的 commit log 和 修改檔案內容差異部份列出
    $ git log --name-only                                       # 列出此次 log 有哪些檔案被修改
    $ git log --stat --summary                                  # 查每個版本間的更動檔案和行數
    $ git log filename                                          # 這個檔案的所有 log
    $ git log directory                                         # 這個目錄的所有 log
    $ git log -S'foo()'                                         # log 裡面有 foo() 這字串的.
    $ git log --no-merges                                       # 不要秀出 merge 的 log
    $ git log --since="2 weeks ago"                             # 最後這 2周的 log
    $ git log --pretty=oneline                                  # 秀 log 的方式
    $ git log --pretty=short                                    # 秀 log 的方式
    $ git log --pretty=format:'%h was %an, %ar, message: %s'
    $ git log --pretty=format:'%h : %s' --graph                 # 會有簡單的文字圖形化, 分支等.
    $ git log --pretty=format:'%h : %s' --topo-order --graph    # 依照主分支排序
    $ git log --pretty=format:'%h : %s' --date-order --graph    # 依照時間排序

    [alias] -- at .gitconfig
    mylog1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    mylog2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all

Git apply / Git am  (加入patch)
    1.  patch 由 git diff 產生
        $ git diff  > yyy.patch
        ps. 類似UNIX更新文件的操作, 單純修改檔案

        合併 patch
        $ git apply /xxx/yyy.patch
        ps. git apply會一次性將差異全部補齊

        在實際打補丁之前，可以先用 git apply --check 查看補丁是否能夠乾淨順利地應用到當前分支中：
        $ git apply --check yyy.patch
        error: patch failed: ticgit.gemspec:1
        error: ticgit.gemspec: patch does not apply
        ps. 如果沒有任何輸出，表示我們可以順利採納該補丁。
            如果有問題，除了報告錯誤資訊之外，該命令還會返回一個非零的狀態，所以在 shell 腳本裡可用於檢測狀態。

        ** 有error時:
        把沒有衝突的文件先合併了，剩下有衝突的作標記。
        $ git apply --reject yyy.patch

    2.  patch 由 format-patch 生成
        a) 兩個節點之間的提交：
            $ git format-patch node_A node_B
        b) 單個節點：
            $ git format-patch -1 node_A （-n就表示要生成幾個node的提交）
        c) 最近一次提交節點的patch：
            $ git format-patch HEAD^ (依次類推……)

        ps. git format-patch 是 git專有, 會根據提交的 node一個節點一個 patch。


        合併 patch
        $ git am yyy.patch
        ps. git am 會連同 patch作者的 history一併補上 (多了一個 patch作者 history的 commint記錄)

        對於打過的補丁又再打一遍，會產生衝突，因此加上 -3 選項，git會很聰明地告訴我，無需更新，原有的補丁已經應用。
        $ git am -3 yyy.patch

Git export specific version
    $ git archive --format=tar.gz --prefix=[prefix]/ [SHA or tag or HEAD] > your_output_name.tar.gz


